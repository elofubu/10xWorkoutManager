@page "/"
@using WorkoutManager.Business.DTOs
@using WorkoutManager.Business.Interfaces
@inject ISessionService SessionService
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1>Welcome to 10x Workout Manager</h1>

@if (_latestSession == null && !_loading)
{
    <div class="alert alert-info">
        You haven't recorded any sessions yet.
    </div>
    <button class="btn btn-primary" @onclick="StartEmptySession">Start Your First Session</button>
}
else if (_loading)
{
    <p><em>Loading dashboard...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4>Latest Session: @_latestSession?.StartTime.ToLocalTime().ToString("f")</h4>
                </div>
                <div class="card-body">
                    @if (_latestSession != null && _latestSession.Exercises.Any())
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var exercise in _latestSession.Exercises.OrderBy(e => e.Order))
                            {
                                <li class="list-group-item">
                                    <strong>@exercise.ExerciseName</strong>
                                    @if (exercise.Sets.Any())
                                    {
                                        <small class="text-muted ms-2">
                                            (@string.Join(", ", exercise.Sets.OrderBy(s => s.Order).Select(s => $"{s.Weight}kg x {s.Reps}")))
                                        </small>
                                    }
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No exercises were recorded for this session.</p>
                    }
                </div>
                <div class="card-footer">
                    <button class="btn btn-secondary" @onclick="() => RepeatSession(_latestSession?.PlanId)">Repeat This Workout</button>
                    <button class="btn btn-info" @onclick="ViewSessionDetails">View Details</button>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4>Quick Start</h4>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="StartEmptySession">Start Empty Session</button>
                        <a href="/sessions" class="btn btn-outline-secondary">Start from Plan</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private SessionDto? _latestSession;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        _latestSession = await SessionService.GetLatestSessionAsync();
        _loading = false;
    }

    private async Task StartEmptySession()
    {
        var newSession = await SessionService.StartSessionAsync(null);
        NavigationManager.NavigateTo($"/session/{newSession.Id}");
    }

    private async Task RepeatSession(long? planId)
    {
        if (planId == null)
        {
            await StartEmptySession();
        }
        else
        {
            var newSession = await SessionService.StartSessionAsync(planId.Value);
            NavigationManager.NavigateTo($"/session/{newSession.Id}");
        }
    }

    private void ViewSessionDetails()
    {
        if (_latestSession != null)
        {
            NavigationManager.NavigateTo($"/session/{_latestSession.Id}");
        }
    }
}
