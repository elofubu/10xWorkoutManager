@page "/workout-plans"
@using WorkoutManager.Business.DTOs
@using WorkoutManager.Business.Interfaces
@inject IWorkoutPlanService WorkoutPlanService
@inject NavigationManager NavigationManager

<h1>Workout Plans</h1>

@if (_workoutPlans == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick='() => NavigationManager.NavigateTo("/workout-plans/new")'>Create New Plan</button>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var plan in _workoutPlans)
            {
                <tr>
                    <td><a href="#" @onclick="() => NavigateToPlan(plan.Id)" @onclick:preventDefault>@plan.Name</a></td>
                    <td>@plan.Description</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => NavigateToPlan(plan.Id)">Manage</button>
                        <button class="btn btn-sm btn-secondary" @onclick="() => NavigateToEditPlan(plan.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="async () => await DeletePlan(plan.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3">@_errorMessage</div>
}

@code {
    private IEnumerable<WorkoutPlanDto> _workoutPlans = new List<WorkoutPlanDto>();
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlans();
    }

    private async Task LoadPlans()
    {
        _workoutPlans = await WorkoutPlanService.GetAllWorkoutPlansAsync();
    }

    private async Task DeletePlan(long planId)
    {
        _errorMessage = null;
        try
        {
            await WorkoutPlanService.DeleteWorkoutPlanAsync(planId);
            await LoadPlans();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void NavigateToPlan(long id)
    {
        NavigationManager.NavigateTo($"/workout-plan/{id}");
    }

    private void NavigateToEditPlan(long id)
    {
        NavigationManager.NavigateTo($"/workout-plans/edit/{id}");
    }
}
