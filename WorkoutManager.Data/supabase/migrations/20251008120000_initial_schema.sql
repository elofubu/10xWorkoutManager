-- Create the muscle groups table
CREATE TABLE public.muscle_groups (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create the exercises table
CREATE TABLE public.exercises (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    muscle_group_id BIGINT NOT NULL REFERENCES public.muscle_groups(id) ON DELETE RESTRICT,
    name TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT unique_user_exercise_name UNIQUE(user_id, name)
);

CREATE UNIQUE INDEX unique_predefined_exercise_name ON public.exercises(name) WHERE (user_id IS NULL);

-- Create the workout plans table
CREATE TABLE public.workout_plans (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create the training days table
CREATE TABLE public.training_days (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    plan_id BIGINT NOT NULL REFERENCES public.workout_plans(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    "order" SMALLINT NOT NULL CHECK ("order" >= 0),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create the join table for training days and exercises
CREATE TABLE public.plan_day_exercises (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    training_day_id BIGINT NOT NULL REFERENCES public.training_days(id) ON DELETE CASCADE,
    exercise_id BIGINT NOT NULL REFERENCES public.exercises(id) ON DELETE CASCADE,
    "order" SMALLINT NOT NULL CHECK ("order" >= 0),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create the sessions table
CREATE TABLE public.sessions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    plan_id BIGINT REFERENCES public.workout_plans(id) ON DELETE SET NULL,
    notes TEXT,
    start_time TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    end_time TIMESTAMPTZ
);

-- Create the session exercises table
CREATE TABLE public.session_exercises (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id BIGINT NOT NULL REFERENCES public.sessions(id) ON DELETE CASCADE,
    exercise_id BIGINT NOT NULL REFERENCES public.exercises(id) ON DELETE RESTRICT,
    notes TEXT,
    skipped BOOLEAN NOT NULL DEFAULT FALSE,
    "order" SMALLINT NOT NULL CHECK ("order" >= 0)
);

-- Create the exercise sets table
CREATE TABLE public.exercise_sets (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_exercise_id BIGINT NOT NULL REFERENCES public.session_exercises(id) ON DELETE CASCADE,
    weight DECIMAL(10, 2) NOT NULL CHECK (weight >= 0),
    reps SMALLINT NOT NULL CHECK (reps >= 0),
    is_failure BOOLEAN NOT NULL DEFAULT FALSE,
    "order" SMALLINT NOT NULL CHECK ("order" >= 0),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

/********************************************************************************/
/*                              ROW LEVEL SECURITY                              */
/********************************************************************************/

-- Enable RLS
ALTER TABLE public.muscle_groups ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.exercises ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.workout_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.training_days ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.plan_day_exercises ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.session_exercises ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.exercise_sets ENABLE ROW LEVEL SECURITY;

-- POLICIES
-- muscle_groups
CREATE POLICY "Allow read access to all authenticated users" ON public.muscle_groups
    FOR SELECT TO authenticated USING (true);

-- exercises
CREATE POLICY "Allow read access for predefined and user-owned exercises" ON public.exercises
    FOR SELECT TO authenticated USING (user_id IS NULL OR user_id = auth.uid());
CREATE POLICY "Allow insert for user-owned exercises" ON public.exercises
    FOR INSERT TO authenticated WITH CHECK (user_id = auth.uid());
CREATE POLICY "Allow update for user-owned exercises" ON public.exercises
    FOR UPDATE TO authenticated USING (user_id = auth.uid());
CREATE POLICY "Allow delete for user-owned exercises" ON public.exercises
    FOR DELETE TO authenticated USING (user_id = auth.uid());

-- workout_plans
CREATE POLICY "Allow full access for user-owned plans" ON public.workout_plans
    FOR ALL TO authenticated USING (user_id = auth.uid()) WITH CHECK (user_id = auth.uid());

-- training_days
CREATE POLICY "Allow full access for plan owners" ON public.training_days
    FOR ALL TO authenticated
    USING (EXISTS (
        SELECT 1 FROM public.workout_plans
        WHERE workout_plans.id = training_days.plan_id AND workout_plans.user_id = auth.uid()
    ))
    WITH CHECK (EXISTS (
        SELECT 1 FROM public.workout_plans
        WHERE workout_plans.id = training_days.plan_id AND workout_plans.user_id = auth.uid()
    ));

-- plan_day_exercises
CREATE POLICY "Allow full access for plan owners" ON public.plan_day_exercises
    FOR ALL TO authenticated
    USING (EXISTS (
        SELECT 1 FROM public.training_days
        JOIN public.workout_plans ON training_days.plan_id = workout_plans.id
        WHERE training_days.id = plan_day_exercises.training_day_id AND workout_plans.user_id = auth.uid()
    ))
    WITH CHECK (EXISTS (
        SELECT 1 FROM public.training_days
        JOIN public.workout_plans ON training_days.plan_id = workout_plans.id
        WHERE training_days.id = plan_day_exercises.training_day_id AND workout_plans.user_id = auth.uid()
    ));

-- sessions
CREATE POLICY "Allow full access for user-owned sessions" ON public.sessions
    FOR ALL TO authenticated USING (user_id = auth.uid()) WITH CHECK (user_id = auth.uid());

-- session_exercises
CREATE POLICY "Allow full access for session owners" ON public.session_exercises
    FOR ALL TO authenticated
    USING (EXISTS (
        SELECT 1 FROM public.sessions
        WHERE sessions.id = session_exercises.session_id AND sessions.user_id = auth.uid()
    ))
    WITH CHECK (EXISTS (
        SELECT 1 FROM public.sessions
        WHERE sessions.id = session_exercises.session_id AND sessions.user_id = auth.uid()
    ));

-- exercise_sets
CREATE POLICY "Allow full access for session owners" ON public.exercise_sets
    FOR ALL TO authenticated
    USING (EXISTS (
        SELECT 1 FROM public.session_exercises
        JOIN public.sessions ON session_exercises.session_id = sessions.id
        WHERE session_exercises.id = exercise_sets.session_exercise_id AND sessions.user_id = auth.uid()
    ))
    WITH CHECK (EXISTS (
        SELECT 1 FROM public.session_exercises
        JOIN public.sessions ON session_exercises.session_id = sessions.id
        WHERE session_exercises.id = exercise_sets.session_exercise_id AND sessions.user_id = auth.uid()
    ));
