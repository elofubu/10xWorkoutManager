name: Unit and Integration Tests

on:
  push:
    branches: master
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: WorkoutManager.Api Secrets Variables Substitution
      uses: microsoft/variable-substitution@v1
      with:
        files: '**/appsettings.json'
      env:
        SupabaseSettings.Secret: ${{ secrets.SUPABASESETTINGS_SECRET_API }}
        SupabaseSettings.Url: ${{ secrets.SUPABASESETTINGS_URL }}
        JwtBearerSettings.IssuerSigningKey: ${{ secrets.JWTBEARERSETTINGS__ISSUERSIGNINGKEY }}
    
    - name: WorkoutManager.Api.Tests Secrets Variables Substitution
      uses: microsoft/variable-substitution@v1
      with:
        files: '**/appsettings.Testing.json'
      env:
        SupabaseSettings.Secret: ${{ secrets.SUPABASESETTINGS__SECRET }}
        SupabaseSettings.TestUserId: ${{ secrets.SUPABASESETTINGS__TESTUSERID }}
        SupabaseSettings.Url: ${{ secrets.SUPABASESETTINGS_URL }}
        JwtBearerSettings.Key: ${{ secrets.JWTBEARERSETTINGS__KEY }}
        ConnectionStrings.DefaultConnection: ${{ secrets.CONNECTIONSTRINGS__DEFAULTCONNECTION }}

    - name: Run Unit and Integration Tests
      run: |
        dotnet test WorkoutManager.Api.Tests --no-build --configuration Release --collect:"XPlat Code Coverage" --logger "trx;LogFileName=api-tests.trx"
        dotnet test WorkoutManager.BusinessLogic.Tests --no-build --configuration Release --collect:"XPlat Code Coverage" --logger "trx;LogFileName=businesslogic-tests.trx"
        dotnet test WorkoutManager.Data.Tests --no-build --configuration Release --collect:"XPlat Code Coverage" --logger "trx;LogFileName=data-tests.trx"
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/TestResults/*.trx'
    
    - name: Generate Coverage Report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"CoverageReport" -reporttypes:"Html;Cobertura"
    
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: CoverageReport/
    
    - name: Code Coverage Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: '**/coverage.cobertura.xml'
        badge: true
        format: markdown
        output: both
    
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md



